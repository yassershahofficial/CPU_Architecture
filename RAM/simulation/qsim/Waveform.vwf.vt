// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/29/2025 21:34:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] addr;
reg clk;
reg [15:0] data_in;
reg read;
reg write;
// wires                                               
wire [15:0] data_out;

// assign statements (if any)                          
RAM i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.clk(clk),
	.data_in(data_in),
	.data_out(data_out),
	.read(read),
	.write(write)
);
initial 
begin 
#100000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// write
initial
begin
	write = 1'b0;
	write = #10000 1'b1;
	write = #10000 1'b0;
	write = #10000 1'b1;
	write = #20000 1'b0;
	write = #20000 1'b1;
	write = #20000 1'b0;
end 

// read
initial
begin
	read = 1'b0;
	read = #20000 1'b1;
	read = #10000 1'b0;
	read = #20000 1'b1;
	read = #40000 1'b0;
end 
// addr[ 5 ]
initial
begin
	addr[5] = 1'b0;
	addr[5] = #10000 1'b1;
	addr[5] = #20000 1'b0;
	addr[5] = #40000 1'b1;
	addr[5] = #20000 1'b0;
end 
// addr[ 4 ]
initial
begin
	addr[4] = 1'b0;
	addr[4] = #30000 1'b1;
	addr[4] = #10000 1'b0;
	addr[4] = #10000 1'b1;
	addr[4] = #10000 1'b0;
	addr[4] = #10000 1'b1;
	addr[4] = #20000 1'b0;
end 
// addr[ 3 ]
initial
begin
	addr[3] = 1'b0;
	addr[3] = #30000 1'b1;
	addr[3] = #10000 1'b0;
	addr[3] = #10000 1'b1;
	addr[3] = #10000 1'b0;
	addr[3] = #10000 1'b1;
	addr[3] = #20000 1'b0;
end 
// addr[ 2 ]
initial
begin
	addr[2] = 1'b0;
	addr[2] = #10000 1'b1;
	addr[2] = #60000 1'b0;
end 
// addr[ 1 ]
initial
begin
	addr[1] = 1'b0;
	addr[1] = #10000 1'b1;
	addr[1] = #30000 1'b0;
	addr[1] = #10000 1'b1;
	addr[1] = #10000 1'b0;
	addr[1] = #10000 1'b1;
	addr[1] = #20000 1'b0;
end 
// addr[ 0 ]
initial
begin
	addr[0] = 1'b0;
	addr[0] = #30000 1'b1;
	addr[0] = #60000 1'b0;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b1;
	data_in[15] = #10000 1'b0;
	data_in[15] = #20000 1'b1;
	data_in[15] = #10000 1'b0;
	data_in[15] = #10000 1'b1;
	data_in[15] = #10000 1'b0;
	data_in[15] = #10000 1'b1;
	data_in[15] = #10000 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b0;
	data_in[14] = #10000 1'b1;
	data_in[14] = #10000 1'b0;
	data_in[14] = #10000 1'b1;
	data_in[14] = #10000 1'b0;
	data_in[14] = #20000 1'b1;
	data_in[14] = #10000 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b1;
	data_in[13] = #10000 1'b0;
	data_in[13] = #10000 1'b1;
	data_in[13] = #40000 1'b0;
	data_in[13] = #10000 1'b1;
	data_in[13] = #10000 1'b0;
	data_in[13] = #10000 1'b1;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b0;
	data_in[12] = #10000 1'b1;
	data_in[12] = #40000 1'b0;
	data_in[12] = #30000 1'b1;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b1;
	data_in[11] = #10000 1'b0;
	data_in[11] = #10000 1'b1;
	data_in[11] = #40000 1'b0;
	data_in[11] = #30000 1'b1;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b1;
	data_in[10] = #70000 1'b0;
	data_in[10] = #20000 1'b1;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b0;
	data_in[9] = #20000 1'b1;
	data_in[9] = #10000 1'b0;
	data_in[9] = #20000 1'b1;
	data_in[9] = #20000 1'b0;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b1;
	data_in[8] = #10000 1'b0;
	data_in[8] = #10000 1'b1;
	data_in[8] = #50000 1'b0;
	data_in[8] = #10000 1'b1;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b1;
	data_in[7] = #20000 1'b0;
	data_in[7] = #30000 1'b1;
	data_in[7] = #10000 1'b0;
	data_in[7] = #30000 1'b1;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
	data_in[6] = #10000 1'b1;
	data_in[6] = #10000 1'b0;
	data_in[6] = #20000 1'b1;
	data_in[6] = #10000 1'b0;
	data_in[6] = #20000 1'b1;
	data_in[6] = #10000 1'b0;
	data_in[6] = #10000 1'b1;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
	data_in[5] = #10000 1'b1;
	data_in[5] = #30000 1'b0;
	data_in[5] = #30000 1'b1;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b1;
	data_in[4] = #30000 1'b0;
	data_in[4] = #20000 1'b1;
	data_in[4] = #10000 1'b0;
	data_in[4] = #20000 1'b1;
	data_in[4] = #10000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
	data_in[3] = #20000 1'b1;
	data_in[3] = #20000 1'b0;
	data_in[3] = #30000 1'b1;
	data_in[3] = #10000 1'b0;
	data_in[3] = #10000 1'b1;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
	data_in[2] = #10000 1'b1;
	data_in[2] = #20000 1'b0;
	data_in[2] = #20000 1'b1;
	data_in[2] = #20000 1'b0;
	data_in[2] = #20000 1'b1;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b1;
	data_in[1] = #10000 1'b0;
	data_in[1] = #10000 1'b1;
	data_in[1] = #10000 1'b0;
	data_in[1] = #10000 1'b1;
	data_in[1] = #40000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b1;
	data_in[0] = #10000 1'b0;
	data_in[0] = #50000 1'b1;
	data_in[0] = #20000 1'b0;
	data_in[0] = #10000 1'b1;
end 
endmodule

